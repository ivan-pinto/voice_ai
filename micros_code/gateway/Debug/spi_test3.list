
gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08004170  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08004170  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c522  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c78  00000000  00000000  0002c55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ada  00000000  00000000  0002f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c01b  00000000  00000000  0004ff8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6831  00000000  00000000  0005bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001227d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  0012282c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004124 	.word	0x08004124

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004124 	.word	0x08004124

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004fc:	b4b0      	push	{r4, r5, r7}
 80004fe:	b08f      	sub	sp, #60	; 0x3c
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000504:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800050a:	2307      	movs	r3, #7
 800050c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000510:	2307      	movs	r3, #7
 8000512:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000516:	2301      	movs	r3, #1
 8000518:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 800051c:	23ff      	movs	r3, #255	; 0xff
 800051e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000528:	2308      	movs	r3, #8
 800052a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	461d      	mov	r5, r3
 8000530:	f107 040c 	add.w	r4, r7, #12
 8000534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800053c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000540:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	373c      	adds	r7, #60	; 0x3c
 8000548:	46bd      	mov	sp, r7
 800054a:	bcb0      	pop	{r4, r5, r7}
 800054c:	4770      	bx	lr

0800054e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6898      	ldr	r0, [r3, #8]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	899b      	ldrh	r3, [r3, #12]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f001 fb0b 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f000 ff94 	bl	8001494 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6898      	ldr	r0, [r3, #8]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	899b      	ldrh	r3, [r3, #12]
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f001 fb00 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800057c:	2064      	movs	r0, #100	; 0x64
 800057e:	f000 ff89 	bl	8001494 <HAL_Delay>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000594:	2101      	movs	r1, #1
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f99f 	bl	80008da <LoRa_read>
 800059c:	4603      	mov	r3, r0
 800059e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80005a0:	7bbb      	ldrb	r3, [r7, #14]
 80005a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d107      	bne.n	80005ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	f023 0307 	bic.w	r3, r3, #7
 80005b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	e03e      	b.n	8000638 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10c      	bne.n	80005da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80005c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005c4:	f023 0307 	bic.w	r3, r3, #7
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2201      	movs	r2, #1
 80005d6:	61da      	str	r2, [r3, #28]
 80005d8:	e02e      	b.n	8000638 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d10c      	bne.n	80005fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005e4:	f023 0307 	bic.w	r3, r3, #7
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	f043 0303 	orr.w	r3, r3, #3
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2203      	movs	r2, #3
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	e01e      	b.n	8000638 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	d10c      	bne.n	800061a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000604:	f023 0307 	bic.w	r3, r3, #7
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f043 0305 	orr.w	r3, r3, #5
 800060e:	b25b      	sxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2205      	movs	r2, #5
 8000616:	61da      	str	r2, [r3, #28]
 8000618:	e00e      	b.n	8000638 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d10b      	bne.n	8000638 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000624:	f023 0307 	bic.w	r3, r3, #7
 8000628:	b25b      	sxtb	r3, r3
 800062a:	f043 0306 	orr.w	r3, r3, #6
 800062e:	b25b      	sxtb	r3, r3
 8000630:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2206      	movs	r2, #6
 8000636:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	461a      	mov	r2, r3
 800063c:	2101      	movs	r1, #1
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f968 	bl	8000914 <LoRa_write>
	//HAL_Delay(10);
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4613      	mov	r3, r2
 800065a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	889b      	ldrh	r3, [r3, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f001 fa88 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6998      	ldr	r0, [r3, #24]
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	f002 f88d 	bl	8002796 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800067c:	bf00      	nop
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fc76 	bl	8002f74 <HAL_SPI_GetState>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d1f7      	bne.n	800067e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6998      	ldr	r0, [r3, #24]
 8000692:	8b3a      	ldrh	r2, [r7, #24]
 8000694:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000698:	6839      	ldr	r1, [r7, #0]
 800069a:	f002 f9b8 	bl	8002a0e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800069e:	bf00      	nop
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fc65 	bl	8002f74 <HAL_SPI_GetState>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d1f7      	bne.n	80006a0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	f001 fa5e 	bl	8001b7c <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	889b      	ldrh	r3, [r3, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 fa4a 	bl	8001b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	6998      	ldr	r0, [r3, #24]
 80006ec:	88fa      	ldrh	r2, [r7, #6]
 80006ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	f002 f84f 	bl	8002796 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006f8:	bf00      	nop
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fc38 	bl	8002f74 <HAL_SPI_GetState>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d1f7      	bne.n	80006fa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6998      	ldr	r0, [r3, #24]
 800070e:	8b3a      	ldrh	r2, [r7, #24]
 8000710:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	f002 f83e 	bl	8002796 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800071a:	bf00      	nop
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fc27 	bl	8002f74 <HAL_SPI_GetState>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d1f7      	bne.n	800071c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	889b      	ldrh	r3, [r3, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	f001 fa20 	bl	8001b7c <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	04db      	lsls	r3, r3, #19
 8000752:	115b      	asrs	r3, r3, #5
 8000754:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	0c1b      	lsrs	r3, r3, #16
 800075a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800075c:	7afb      	ldrb	r3, [r7, #11]
 800075e:	461a      	mov	r2, r3
 8000760:	2106      	movs	r1, #6
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f8d6 	bl	8000914 <LoRa_write>
	HAL_Delay(5);
 8000768:	2005      	movs	r0, #5
 800076a:	f000 fe93 	bl	8001494 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	461a      	mov	r2, r3
 8000778:	2107      	movs	r1, #7
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f8ca 	bl	8000914 <LoRa_write>
	HAL_Delay(5);
 8000780:	2005      	movs	r0, #5
 8000782:	f000 fe87 	bl	8001494 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800078a:	7afb      	ldrb	r3, [r7, #11]
 800078c:	461a      	mov	r2, r3
 800078e:	2108      	movs	r1, #8
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8bf 	bl	8000914 <LoRa_write>
	HAL_Delay(5);
 8000796:	2005      	movs	r0, #5
 8000798:	f000 fe7c 	bl	8001494 <HAL_Delay>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b0c      	cmp	r3, #12
 80007b2:	dd01      	ble.n	80007b8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80007b4:	230c      	movs	r3, #12
 80007b6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	dc01      	bgt.n	80007c2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007c2:	211e      	movs	r1, #30
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f888 	bl	80008da <LoRa_read>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f000 fe60 	bl	8001494 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	461a      	mov	r2, r3
 80007ec:	211e      	movs	r1, #30
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f890 	bl	8000914 <LoRa_write>
	HAL_Delay(10);
 80007f4:	200a      	movs	r0, #10
 80007f6:	f000 fe4d 	bl	8001494 <HAL_Delay>
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	460b      	mov	r3, r1
 800080c:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	461a      	mov	r2, r3
 8000812:	2109      	movs	r1, #9
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f87d 	bl	8000914 <LoRa_write>
	HAL_Delay(10);
 800081a:	200a      	movs	r0, #10
 800081c:	f000 fe3a 	bl	8001494 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b2c      	cmp	r3, #44	; 0x2c
 800083c:	d801      	bhi.n	8000842 <LoRa_setOCP+0x1a>
		current = 45;
 800083e:	232d      	movs	r3, #45	; 0x2d
 8000840:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	2bf0      	cmp	r3, #240	; 0xf0
 8000846:	d901      	bls.n	800084c <LoRa_setOCP+0x24>
		current = 240;
 8000848:	23f0      	movs	r3, #240	; 0xf0
 800084a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	2b78      	cmp	r3, #120	; 0x78
 8000850:	d809      	bhi.n	8000866 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	3b2d      	subs	r3, #45	; 0x2d
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <LoRa_setOCP+0x78>)
 8000858:	fb82 1203 	smull	r1, r2, r2, r3
 800085c:	1052      	asrs	r2, r2, #1
 800085e:	17db      	asrs	r3, r3, #31
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e00b      	b.n	800087e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	2bf0      	cmp	r3, #240	; 0xf0
 800086a:	d808      	bhi.n	800087e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	331e      	adds	r3, #30
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoRa_setOCP+0x78>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1092      	asrs	r2, r2, #2
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	3320      	adds	r3, #32
 8000882:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	461a      	mov	r2, r3
 8000888:	210b      	movs	r1, #11
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f842 	bl	8000914 <LoRa_write>
	HAL_Delay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f000 fdff 	bl	8001494 <HAL_Delay>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	66666667 	.word	0x66666667

080008a4 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80008ac:	211e      	movs	r1, #30
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f813 	bl	80008da <LoRa_read>
 80008b4:	4603      	mov	r3, r0
 80008b6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	f043 0307 	orr.w	r3, r3, #7
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	461a      	mov	r2, r3
 80008c4:	211e      	movs	r1, #30
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f824 	bl	8000914 <LoRa_write>
	HAL_Delay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f000 fde1 	bl	8001494 <HAL_Delay>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af02      	add	r7, sp, #8
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008f0:	f107 030f 	add.w	r3, r7, #15
 80008f4:	f107 010e 	add.w	r1, r7, #14
 80008f8:	2201      	movs	r2, #1
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	2201      	movs	r2, #1
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fea4 	bl	800064c <LoRa_readReg>
	HAL_Delay(5);
 8000904:	2005      	movs	r0, #5
 8000906:	f000 fdc5 	bl	8001494 <HAL_Delay>

	return read_data;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
 8000920:	4613      	mov	r3, r2
 8000922:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800092a:	b2db      	uxtb	r3, r3
 800092c:	73bb      	strb	r3, [r7, #14]
	data = value;
 800092e:	78bb      	ldrb	r3, [r7, #2]
 8000930:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000932:	f107 030f 	add.w	r3, r7, #15
 8000936:	f107 010e 	add.w	r1, r7, #14
 800093a:	2201      	movs	r2, #1
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	2201      	movs	r2, #1
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fec1 	bl	80006c8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	461a      	mov	r2, r3
 800095a:	460b      	mov	r3, r1
 800095c:	72fb      	strb	r3, [r7, #11]
 800095e:	4613      	mov	r3, r2
 8000960:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000968:	b2db      	uxtb	r3, r3
 800096a:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	f001 f900 	bl	8001b7c <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6998      	ldr	r0, [r3, #24]
 8000980:	f107 0117 	add.w	r1, r7, #23
 8000984:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000988:	2201      	movs	r2, #1
 800098a:	f001 ff04 	bl	8002796 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800098e:	bf00      	nop
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4618      	mov	r0, r3
 8000996:	f002 faed 	bl	8002f74 <HAL_SPI_GetState>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d1f7      	bne.n	8000990 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6998      	ldr	r0, [r3, #24]
 80009a4:	7abb      	ldrb	r3, [r7, #10]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	f001 fef2 	bl	8002796 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80009b2:	bf00      	nop
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fadb 	bl	8002f74 <HAL_SPI_GetState>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d1f7      	bne.n	80009b4 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4619      	mov	r1, r3
 80009d0:	f001 f8d4 	bl	8001b7c <HAL_GPIO_WritePin>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

	return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	4611      	mov	r1, r2
 80009fe:	461a      	mov	r2, r3
 8000a00:	460b      	mov	r3, r1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	4613      	mov	r3, r2
 8000a06:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f7ff fdba 	bl	800058a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000a16:	210e      	movs	r1, #14
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff ff5e 	bl	80008da <LoRa_read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	461a      	mov	r2, r3
 8000a26:	210d      	movs	r1, #13
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff ff73 	bl	8000914 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	461a      	mov	r2, r3
 8000a32:	2122      	movs	r1, #34	; 0x22
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ff6d 	bl	8000914 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	2100      	movs	r1, #0
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff ff84 	bl	800094e <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a46:	2103      	movs	r1, #3
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd9e 	bl	800058a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a4e:	2112      	movs	r1, #18
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff ff42 	bl	80008da <LoRa_read>
 8000a56:	4603      	mov	r3, r0
 8000a58:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000a5a:	7cfb      	ldrb	r3, [r7, #19]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00a      	beq.n	8000a7a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a64:	22ff      	movs	r2, #255	; 0xff
 8000a66:	2112      	movs	r1, #18
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff ff53 	bl	8000914 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a6e:	6979      	ldr	r1, [r7, #20]
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fd8a 	bl	800058a <LoRa_gotoMode>
			return 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	80bb      	strh	r3, [r7, #4]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d105      	bne.n	8000a92 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000a86:	6979      	ldr	r1, [r7, #20]
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff fd7e 	bl	800058a <LoRa_gotoMode>
				return 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e003      	b.n	8000a9a <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 fcfe 	bl	8001494 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a98:	e7d9      	b.n	8000a4e <LoRa_transmit+0x5c>
	}

}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ff96 	bl	80009dc <LoRa_isvalid>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 8093 	beq.w	8000bde <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fd65 	bl	800058a <LoRa_gotoMode>
			HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fce7 	bl	8001494 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff06 	bl	80008da <LoRa_read>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f000 fcde 	bl	8001494 <HAL_Delay>
			data = read | 0x80;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ade:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff14 	bl	8000914 <LoRa_write>
			HAL_Delay(100);
 8000aec:	2064      	movs	r0, #100	; 0x64
 8000aee:	f000 fcd1 	bl	8001494 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	4619      	mov	r1, r3
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fe23 	bl	8000744 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000b04:	4619      	mov	r1, r3
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff fe7b 	bl	8000802 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fe87 	bl	8000828 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000b1a:	2223      	movs	r2, #35	; 0x23
 8000b1c:	210c      	movs	r1, #12
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fef8 	bl	8000914 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff febd 	bl	80008a4 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fe36 	bl	80007a4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000b38:	22ff      	movs	r2, #255	; 0xff
 8000b3a:	211f      	movs	r1, #31
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fee9 	bl	8000914 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	461a      	mov	r2, r3
 8000b62:	211d      	movs	r1, #29
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fed5 	bl	8000914 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	2120      	movs	r1, #32
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fecb 	bl	8000914 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	2121      	movs	r1, #33	; 0x21
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fec3 	bl	8000914 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fea2 	bl	80008da <LoRa_read>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000ba0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2140      	movs	r1, #64	; 0x40
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff feb3 	bl	8000914 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fcea 	bl	800058a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f000 fc69 	bl	8001494 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000bc2:	2142      	movs	r1, #66	; 0x42
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fe88 	bl	80008da <LoRa_read>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2b12      	cmp	r3, #18
 8000bd2:	d101      	bne.n	8000bd8 <LoRa_init+0x136>
				return LORA_OK;
 8000bd4:	23c8      	movs	r3, #200	; 0xc8
 8000bd6:	e004      	b.n	8000be2 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000bd8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000bdc:	e001      	b.n	8000be2 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000bde:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fbde 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f8c4 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f990 	bl	8000f1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 f964 	bl	8000ec8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c00:	f000 f92c 	bl	8000e5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MX_LoRa_Init();
 8000c04:	f000 fa0a 	bl	800101c <MX_LoRa_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint8_t counter = 0;


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	4856      	ldr	r0, [pc, #344]	; (8000d68 <main+0x17c>)
 8000c0e:	f000 ffb5 	bl	8001b7c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_UART_Receive_IT(&huart2, &rxdata, 10);
	HAL_UART_Receive(&huart2, &rxdata, 8, 10);
 8000c12:	230a      	movs	r3, #10
 8000c14:	2208      	movs	r2, #8
 8000c16:	4955      	ldr	r1, [pc, #340]	; (8000d6c <main+0x180>)
 8000c18:	4855      	ldr	r0, [pc, #340]	; (8000d70 <main+0x184>)
 8000c1a:	f002 fb36 	bl	800328a <HAL_UART_Receive>
	HAL_Delay(200);
 8000c1e:	20c8      	movs	r0, #200	; 0xc8
 8000c20:	f000 fc38 	bl	8001494 <HAL_Delay>
	switch(rxdata){
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <main+0x180>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3b21      	subs	r3, #33	; 0x21
 8000c2a:	2b18      	cmp	r3, #24
 8000c2c:	f200 8097 	bhi.w	8000d5e <main+0x172>
 8000c30:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <main+0x4c>)
 8000c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c36:	bf00      	nop
 8000c38:	08000c9d 	.word	0x08000c9d
 8000c3c:	08000d5f 	.word	0x08000d5f
 8000c40:	08000d5f 	.word	0x08000d5f
 8000c44:	08000d5f 	.word	0x08000d5f
 8000c48:	08000d5f 	.word	0x08000d5f
 8000c4c:	08000d5f 	.word	0x08000d5f
 8000c50:	08000d5f 	.word	0x08000d5f
 8000c54:	08000d5f 	.word	0x08000d5f
 8000c58:	08000d5f 	.word	0x08000d5f
 8000c5c:	08000d5f 	.word	0x08000d5f
 8000c60:	08000d5f 	.word	0x08000d5f
 8000c64:	08000d5f 	.word	0x08000d5f
 8000c68:	08000d5f 	.word	0x08000d5f
 8000c6c:	08000d5f 	.word	0x08000d5f
 8000c70:	08000d5f 	.word	0x08000d5f
 8000c74:	08000d5f 	.word	0x08000d5f
 8000c78:	08000d5f 	.word	0x08000d5f
 8000c7c:	08000d5f 	.word	0x08000d5f
 8000c80:	08000d5f 	.word	0x08000d5f
 8000c84:	08000d5f 	.word	0x08000d5f
 8000c88:	08000d5f 	.word	0x08000d5f
 8000c8c:	08000d5f 	.word	0x08000d5f
 8000c90:	08000ccf 	.word	0x08000ccf
 8000c94:	08000cff 	.word	0x08000cff
 8000c98:	08000d2f 	.word	0x08000d2f
	case 33:
		if ((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)) == GPIO_PIN_SET)
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4832      	ldr	r0, [pc, #200]	; (8000d68 <main+0x17c>)
 8000ca0:	f000 ff54 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d105      	bne.n	8000cb6 <main+0xca>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2120      	movs	r1, #32
 8000cae:	482e      	ldr	r0, [pc, #184]	; (8000d68 <main+0x17c>)
 8000cb0:	f000 ff64 	bl	8001b7c <HAL_GPIO_WritePin>
 8000cb4:	e004      	b.n	8000cc0 <main+0xd4>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2120      	movs	r1, #32
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <main+0x17c>)
 8000cbc:	f000 ff5e 	bl	8001b7c <HAL_GPIO_WritePin>
		}
		HAL_Delay(200);
 8000cc0:	20c8      	movs	r0, #200	; 0xc8
 8000cc2:	f000 fbe7 	bl	8001494 <HAL_Delay>
		rxdata = 0;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <main+0x180>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
	break;
 8000ccc:	e04a      	b.n	8000d64 <main+0x178>

	case 55:
		if(LoRa_stat == 1){
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <main+0x188>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d10c      	bne.n	8000cf0 <main+0x104>
		  actionCode = 55;
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <main+0x18c>)
 8000cd8:	2237      	movs	r2, #55	; 0x37
 8000cda:	701a      	strb	r2, [r3, #0]
		  LoRa_transmit(&myLoRa,  &actionCode , sizeof(actionCode), 100);
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4925      	ldr	r1, [pc, #148]	; (8000d78 <main+0x18c>)
 8000ce2:	4826      	ldr	r0, [pc, #152]	; (8000d7c <main+0x190>)
 8000ce4:	f7ff fe85 	bl	80009f2 <LoRa_transmit>
		  HAL_Delay(1000);
 8000ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cec:	f000 fbd2 	bl	8001494 <HAL_Delay>
		}
		HAL_Delay(200);
 8000cf0:	20c8      	movs	r0, #200	; 0xc8
 8000cf2:	f000 fbcf 	bl	8001494 <HAL_Delay>
		rxdata = 0;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <main+0x180>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
	break;
 8000cfc:	e032      	b.n	8000d64 <main+0x178>

	case 56: //more light
		if(LoRa_stat == 1){
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <main+0x188>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10c      	bne.n	8000d20 <main+0x134>
		  actionCode = 56;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <main+0x18c>)
 8000d08:	2238      	movs	r2, #56	; 0x38
 8000d0a:	701a      	strb	r2, [r3, #0]
		  LoRa_transmit(&myLoRa,  &actionCode , sizeof(actionCode), 100);
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4919      	ldr	r1, [pc, #100]	; (8000d78 <main+0x18c>)
 8000d12:	481a      	ldr	r0, [pc, #104]	; (8000d7c <main+0x190>)
 8000d14:	f7ff fe6d 	bl	80009f2 <LoRa_transmit>
		  HAL_Delay(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1c:	f000 fbba 	bl	8001494 <HAL_Delay>
		}
		HAL_Delay(200);
 8000d20:	20c8      	movs	r0, #200	; 0xc8
 8000d22:	f000 fbb7 	bl	8001494 <HAL_Delay>
		rxdata = 0;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <main+0x180>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
	break;
 8000d2c:	e01a      	b.n	8000d64 <main+0x178>

	case 57: //less light
		if(LoRa_stat == 1){
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <main+0x188>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10c      	bne.n	8000d50 <main+0x164>
		  actionCode = 57;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <main+0x18c>)
 8000d38:	2239      	movs	r2, #57	; 0x39
 8000d3a:	701a      	strb	r2, [r3, #0]
		  LoRa_transmit(&myLoRa,  &actionCode , sizeof(actionCode), 100);
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2201      	movs	r2, #1
 8000d40:	490d      	ldr	r1, [pc, #52]	; (8000d78 <main+0x18c>)
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <main+0x190>)
 8000d44:	f7ff fe55 	bl	80009f2 <LoRa_transmit>
		  HAL_Delay(1000);
 8000d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4c:	f000 fba2 	bl	8001494 <HAL_Delay>
		}
		HAL_Delay(200);
 8000d50:	20c8      	movs	r0, #200	; 0xc8
 8000d52:	f000 fb9f 	bl	8001494 <HAL_Delay>
		rxdata = 0;
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <main+0x180>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
	break;
 8000d5c:	e002      	b.n	8000d64 <main+0x178>

	default:
		rxdata = 0;
 8000d5e:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <main+0x180>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(&huart2, &rxdata, 8, 10);
 8000d64:	e755      	b.n	8000c12 <main+0x26>
 8000d66:	bf00      	nop
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	20000089 	.word	0x20000089
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	20000028 	.word	0x20000028
 8000d78:	2000002c 	.word	0x2000002c
 8000d7c:	200000d0 	.word	0x200000d0

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2234      	movs	r2, #52	; 0x34
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 f9c0 	bl	8004114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <SystemClock_Config+0xd4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <SystemClock_Config+0xd4>)
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <SystemClock_Config+0xd4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <SystemClock_Config+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <SystemClock_Config+0xd8>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <SystemClock_Config+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000df4:	2310      	movs	r3, #16
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000df8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dfc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f99a 	bl	8002148 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e1a:	f000 f964 	bl	80010e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 feb8 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e46:	f000 f94e 	bl	80010e6 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MX_SPI2_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e90:	2218      	movs	r2, #24
 8000e92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000eae:	f001 fbe9 	bl	8002684 <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f000 f915 	bl	80010e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000030 	.word	0x20000030
 8000ec4:	40003800 	.word	0x40003800

08000ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_USART2_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f002 f976 	bl	80031f0 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f000 f8ec 	bl	80010e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000008c 	.word	0x2000008c
 8000f18:	40004400 	.word	0x40004400

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a35      	ldr	r2, [pc, #212]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	481b      	ldr	r0, [pc, #108]	; (8001014 <MX_GPIO_Init+0xf8>)
 8000fa8:	f000 fde8 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2103      	movs	r1, #3
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000fb2:	f000 fde3 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_GPIO_Init+0xf8>)
 8000fce:	f000 fc29 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0xfc>)
 8000fea:	f000 fc1b 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0xfc>)
 8001004:	f000 fc0e 	bl	8001824 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400

0800101c <MX_LoRa_Init>:

/* USER CODE BEGIN 4 */
static void MX_LoRa_Init(void)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0

  myLoRa = newLoRa();
 8001022:	4c27      	ldr	r4, [pc, #156]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001024:	463b      	mov	r3, r7
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa68 	bl	80004fc <newLoRa>
 800102c:	4625      	mov	r5, r4
 800102e:	463c      	mov	r4, r7
 8001030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001038:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800103c:	e885 0007 	stmia.w	r5, {r0, r1, r2}


  myLoRa.hSPIx           		= &hspi2;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <MX_LoRa_Init+0xa8>)
 8001044:	619a      	str	r2, [r3, #24]
  myLoRa.CS_port         		= NSS_GPIO_Port;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001048:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <MX_LoRa_Init+0xac>)
 800104a:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          		= NSS_Pin;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_LoRa_Init+0xa4>)
 800104e:	2201      	movs	r2, #1
 8001050:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      		= RST_GPIO_Port;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <MX_LoRa_Init+0xac>)
 8001056:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       		= RST_Pin;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_LoRa_Init+0xa4>)
 800105a:	2202      	movs	r2, #2
 800105c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       		= DIO0_GPIO_Port;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <MX_LoRa_Init+0xac>)
 8001062:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        		= DIO0_Pin;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001066:	2204      	movs	r2, #4
 8001068:	829a      	strh	r2, [r3, #20]


  myLoRa.frequency             	= 433;             // default = 433 MHz
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_LoRa_Init+0xa4>)
 800106c:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001070:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        	= SF_7;            // default = SF_7
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001074:	2207      	movs	r2, #7
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             	= BW_125KHz;       // default = BW_125KHz
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_LoRa_Init+0xa4>)
 800107c:	2207      	movs	r2, #7
 800107e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               	= CR_4_5;          // default = CR_4_5
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 	= POWER_17db;      // default = 20db
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_LoRa_Init+0xa4>)
 800108c:	22fc      	movs	r2, #252	; 0xfc
 800108e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection 	= 100;             // default = 100 mA
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_LoRa_Init+0xa4>)
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              	= 8;              // default = 8;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_LoRa_Init+0xa4>)
 800109c:	2208      	movs	r2, #8
 800109e:	851a      	strh	r2, [r3, #40]	; 0x28

  LoRa_reset(&myLoRa);
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_LoRa_Init+0xa4>)
 80010a2:	f7ff fa54 	bl	800054e <LoRa_reset>

  if(LoRa_init(&myLoRa) == LORA_OK){
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_LoRa_Init+0xa4>)
 80010a8:	f7ff fcfb 	bl	8000aa2 <LoRa_init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2bc8      	cmp	r3, #200	; 0xc8
 80010b0:	d102      	bne.n	80010b8 <MX_LoRa_Init+0x9c>
	  LoRa_stat = 1;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_LoRa_Init+0xb0>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
  }
}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}
 80010c0:	200000d0 	.word	0x200000d0
 80010c4:	20000030 	.word	0x20000030
 80010c8:	40020400 	.word	0x40020400
 80010cc:	20000028 	.word	0x20000028

080010d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 __NOP();
 80010d8:	bf00      	nop
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ea:	b672      	cpsid	i
}
 80010ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ee:	e7fe      	b.n	80010ee <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_MspInit+0x4c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x4c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112e:	2007      	movs	r0, #7
 8001130:	f000 faa4 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800

08001140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a30      	ldr	r2, [pc, #192]	; (8001220 <HAL_SPI_MspInit+0xe0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d15a      	bne.n	8001218 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_SPI_MspInit+0xe4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80011c6:	2307      	movs	r3, #7
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <HAL_SPI_MspInit+0xe8>)
 80011d2:	f000 fb27 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d6:	2304      	movs	r3, #4
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e6:	2305      	movs	r3, #5
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <HAL_SPI_MspInit+0xe8>)
 80011f2:	f000 fb17 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001208:	2305      	movs	r3, #5
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_SPI_MspInit+0xec>)
 8001214:	f000 fb06 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40003800 	.word	0x40003800
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020400 	.word	0x40020400

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_UART_MspInit+0x94>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d133      	bne.n	80012ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_UART_MspInit+0x98>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_UART_MspInit+0x98>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_UART_MspInit+0x98>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_UART_MspInit+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_UART_MspInit+0x98>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_UART_MspInit+0x98>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800128a:	230c      	movs	r3, #12
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129a:	2307      	movs	r3, #7
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <HAL_UART_MspInit+0x9c>)
 80012a6:	f000 fabd 	bl	8001824 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2026      	movs	r0, #38	; 0x26
 80012b0:	f000 f9ef 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012b4:	2026      	movs	r0, #38	; 0x26
 80012b6:	f000 fa08 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 f89a 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <USART2_IRQHandler+0x10>)
 800132a:	f002 f851 	bl	80033d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000008c 	.word	0x2000008c

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001386:	f7ff ffd7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f002 fe9f 	bl	80040cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fc2d 	bl	8000bec <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013a0:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 80013a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013a8:	20000100 	.word	0x20000100

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f94f 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe84 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f967 	bl	80016e6 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f92f 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	200000fc 	.word	0x200000fc

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200000fc 	.word	0x200000fc

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff feb6 	bl	800147c <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d008      	beq.n	8001730 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e052      	b.n	80017d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0216 	bic.w	r2, r2, #22
 800173e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800174e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	d103      	bne.n	8001760 <HAL_DMA_Abort+0x62>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0208 	bic.w	r2, r2, #8
 800176e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	e013      	b.n	80017aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001782:	f7ff fe7b 	bl	800147c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b05      	cmp	r3, #5
 800178e:	d90c      	bls.n	80017aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e015      	b.n	80017d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e4      	bne.n	8001782 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	223f      	movs	r2, #63	; 0x3f
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d004      	beq.n	80017fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e00c      	b.n	8001816 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2205      	movs	r2, #5
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e165      	b.n	8001b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8154 	bne.w	8001b06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ae 	beq.w	8001b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_GPIO_Init+0x300>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a5c      	ldr	r2, [pc, #368]	; (8001b24 <HAL_GPIO_Init+0x300>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b5a      	ldr	r3, [pc, #360]	; (8001b24 <HAL_GPIO_Init+0x300>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_GPIO_Init+0x304>)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x308>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d025      	beq.n	8001a3e <HAL_GPIO_Init+0x21a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <HAL_GPIO_Init+0x30c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x216>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_GPIO_Init+0x310>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x212>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x314>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x20e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <HAL_GPIO_Init+0x318>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x20a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <HAL_GPIO_Init+0x31c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x206>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a49      	ldr	r2, [pc, #292]	; (8001b44 <HAL_GPIO_Init+0x320>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x202>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a82:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae96 	bls.w	8001840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cc      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b68      	ldr	r3, [pc, #416]	; (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d90c      	bls.n	8001bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d044      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d119      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e067      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4934      	ldr	r1, [pc, #208]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff fbec 	bl	800147c <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff fbe8 	bl	800147c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d20c      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f855 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fb4c 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	0800413c 	.word	0x0800413c
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	0800414c 	.word	0x0800414c

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dc0:	f7ff ffdc 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0b5b      	lsrs	r3, r3, #13
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4903      	ldr	r1, [pc, #12]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	0800414c 	.word	0x0800414c

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e00:	4bce      	ldr	r3, [pc, #824]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	f200 818d 	bhi.w	8002128 <HAL_RCC_GetSysClockFreq+0x344>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_RCC_GetSysClockFreq+0x30>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e49 	.word	0x08001e49
 8001e18:	08002129 	.word	0x08002129
 8001e1c:	08002129 	.word	0x08002129
 8001e20:	08002129 	.word	0x08002129
 8001e24:	08001e4f 	.word	0x08001e4f
 8001e28:	08002129 	.word	0x08002129
 8001e2c:	08002129 	.word	0x08002129
 8001e30:	08002129 	.word	0x08002129
 8001e34:	08001e55 	.word	0x08001e55
 8001e38:	08002129 	.word	0x08002129
 8001e3c:	08002129 	.word	0x08002129
 8001e40:	08002129 	.word	0x08002129
 8001e44:	08001fc9 	.word	0x08001fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4bbd      	ldr	r3, [pc, #756]	; (8002140 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e4a:	61bb      	str	r3, [r7, #24]
       break;
 8001e4c:	e16f      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <HAL_RCC_GetSysClockFreq+0x360>)
 8001e50:	61bb      	str	r3, [r7, #24]
      break;
 8001e52:	e16c      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e54:	4bb9      	ldr	r3, [pc, #740]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5e:	4bb7      	ldr	r3, [pc, #732]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d053      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4bb4      	ldr	r3, [pc, #720]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	461a      	mov	r2, r3
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	ea02 0400 	and.w	r4, r2, r0
 8001e82:	603c      	str	r4, [r7, #0]
 8001e84:	400b      	ands	r3, r1
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	014b      	lsls	r3, r1, #5
 8001e9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e9e:	0142      	lsls	r2, r0, #5
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	1ac0      	subs	r0, r0, r3
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	eb61 0103 	sbc.w	r1, r1, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ebc:	0182      	lsls	r2, r0, #6
 8001ebe:	1a12      	subs	r2, r2, r0
 8001ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	00d9      	lsls	r1, r3, #3
 8001ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed2:	00d0      	lsls	r0, r2, #3
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4621      	mov	r1, r4
 8001eda:	1852      	adds	r2, r2, r1
 8001edc:	4629      	mov	r1, r5
 8001ede:	eb43 0101 	adc.w	r1, r3, r1
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	0259      	lsls	r1, r3, #9
 8001eee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ef2:	0250      	lsls	r0, r2, #9
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f7fe f97e 	bl	8000204 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	e04c      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	4b8a      	ldr	r3, [pc, #552]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	099b      	lsrs	r3, r3, #6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	ea02 0a00 	and.w	sl, r2, r0
 8001f2a:	ea03 0b01 	and.w	fp, r3, r1
 8001f2e:	4650      	mov	r0, sl
 8001f30:	4659      	mov	r1, fp
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	014b      	lsls	r3, r1, #5
 8001f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f40:	0142      	lsls	r2, r0, #5
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	ebb0 000a 	subs.w	r0, r0, sl
 8001f4a:	eb61 010b 	sbc.w	r1, r1, fp
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f5c:	0182      	lsls	r2, r0, #6
 8001f5e:	1a12      	subs	r2, r2, r0
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	00d9      	lsls	r1, r3, #3
 8001f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f72:	00d0      	lsls	r0, r2, #3
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	eb12 020a 	adds.w	r2, r2, sl
 8001f7c:	eb43 030b 	adc.w	r3, r3, fp
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0299      	lsls	r1, r3, #10
 8001f8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f8e:	0290      	lsls	r0, r2, #10
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	f7fe f930 	bl	8000204 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	61bb      	str	r3, [r7, #24]
      break;
 8001fc6:	e0b2      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d04d      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	ea02 0800 	and.w	r8, r2, r0
 8001ff6:	ea03 0901 	and.w	r9, r3, r1
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	014b      	lsls	r3, r1, #5
 8002008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800200c:	0142      	lsls	r2, r0, #5
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	ebb0 0008 	subs.w	r0, r0, r8
 8002016:	eb61 0109 	sbc.w	r1, r1, r9
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	018b      	lsls	r3, r1, #6
 8002024:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002028:	0182      	lsls	r2, r0, #6
 800202a:	1a12      	subs	r2, r2, r0
 800202c:	eb63 0301 	sbc.w	r3, r3, r1
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	00d9      	lsls	r1, r3, #3
 800203a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800203e:	00d0      	lsls	r0, r2, #3
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	eb12 0208 	adds.w	r2, r2, r8
 8002048:	eb43 0309 	adc.w	r3, r3, r9
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	0259      	lsls	r1, r3, #9
 8002056:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800205a:	0250      	lsls	r0, r2, #9
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	461a      	mov	r2, r3
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f7fe f8ca 	bl	8000204 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	e04a      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	461a      	mov	r2, r3
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	ea02 0400 	and.w	r4, r2, r0
 8002092:	ea03 0501 	and.w	r5, r3, r1
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	014b      	lsls	r3, r1, #5
 80020a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020a8:	0142      	lsls	r2, r0, #5
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	1b00      	subs	r0, r0, r4
 80020b0:	eb61 0105 	sbc.w	r1, r1, r5
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	018b      	lsls	r3, r1, #6
 80020be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c2:	0182      	lsls	r2, r0, #6
 80020c4:	1a12      	subs	r2, r2, r0
 80020c6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	00d9      	lsls	r1, r3, #3
 80020d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020d8:	00d0      	lsls	r0, r2, #3
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	1912      	adds	r2, r2, r4
 80020e0:	eb45 0303 	adc.w	r3, r5, r3
 80020e4:	f04f 0000 	mov.w	r0, #0
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	0299      	lsls	r1, r3, #10
 80020ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020f2:	0290      	lsls	r0, r2, #10
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	461a      	mov	r2, r3
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f7fe f87e 	bl	8000204 <__aeabi_uldivmod>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4613      	mov	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0f1b      	lsrs	r3, r3, #28
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	61bb      	str	r3, [r7, #24]
      break;
 8002126:	e002      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetSysClockFreq+0x35c>)
 800212a:	61bb      	str	r3, [r7, #24]
      break;
 800212c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212e:	69bb      	ldr	r3, [r7, #24]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e28d      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8083 	beq.w	800226e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002168:	4b94      	ldr	r3, [pc, #592]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d019      	beq.n	80021a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002174:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800217c:	2b08      	cmp	r3, #8
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002180:	4b8e      	ldr	r3, [pc, #568]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05b      	beq.n	800226c <HAL_RCC_OscConfig+0x124>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e25a      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x90>
 80021ca:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7b      	ldr	r2, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xcc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xb4>
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xcc>
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b6c      	ldr	r3, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6b      	ldr	r2, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff f92e 	bl	800147c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff f92a 	bl	800147c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e21f      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xdc>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff f91a 	bl	800147c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff f916 	bl	800147c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e20b      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x104>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06f      	beq.n	800235a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800227a:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d017      	beq.n	80022b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002286:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d105      	bne.n	800229e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x186>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1d3      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff f8c3 	bl	800147c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff f8bf 	bl	800147c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1b4      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4925      	ldr	r1, [pc, #148]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff f8a2 	bl	800147c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff f89e 	bl	800147c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e193      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_RCC_OscConfig+0x27c>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff f882 	bl	800147c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff f87e 	bl	800147c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e173      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x234>
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_OscConfig+0x27c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7ff f86b 	bl	800147c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e00e      	b.n	80023c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff f867 	bl	800147c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d907      	bls.n	80023c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e15c      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b8a      	ldr	r3, [pc, #552]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ea      	bne.n	80023aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8097 	beq.w	8002510 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b83      	ldr	r3, [pc, #524]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a75      	ldr	r2, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff f827 	bl	800147c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff f823 	bl	800147c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e118      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x31e>
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a65      	ldr	r2, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x358>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x340>
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a60      	ldr	r2, [pc, #384]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x358>
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a59      	ldr	r2, [pc, #356]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe ffe8 	bl	800147c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7fe ffe4 	bl	800147c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0d7      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ee      	beq.n	80024b0 <HAL_RCC_OscConfig+0x368>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe ffd2 	bl	800147c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe ffce 	bl	800147c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0c1      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ee      	bne.n	80024dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80ad 	beq.w	8002674 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251a:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d060      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d145      	bne.n	80025ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x4b4>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe ffa2 	bl	800147c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe ff9e 	bl	800147c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e093      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	071b      	lsls	r3, r3, #28
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x4b4>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe ff73 	bl	800147c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe ff6f 	bl	800147c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e064      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x452>
 80025b8:	e05c      	b.n	8002674 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x4b4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe ff5c 	bl	800147c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe ff58 	bl	800147c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e04d      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x480>
 80025e6:	e045      	b.n	8002674 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e040      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x538>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d030      	beq.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d129      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d122      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d119      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07b      	b.n	800278e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a6:	d009      	beq.n	80026bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
 80026ae:	e005      	b.n	80026bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fd32 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	ea42 0103 	orr.w	r1, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0104 	and.w	r1, r3, #4
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f003 0210 	and.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b088      	sub	sp, #32
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_SPI_Transmit+0x22>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e126      	b.n	8002a06 <HAL_SPI_Transmit+0x270>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c0:	f7fe fe5c 	bl	800147c <HAL_GetTick>
 80027c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d002      	beq.n	80027dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027da:	e10b      	b.n	80029f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_Transmit+0x52>
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027ec:	e102      	b.n	80029f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002834:	d10f      	bne.n	8002856 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002854:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d007      	beq.n	8002874 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800287c:	d14b      	bne.n	8002916 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_SPI_Transmit+0xf6>
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d13e      	bne.n	800290a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028b0:	e02b      	b.n	800290a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d112      	bne.n	80028e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	881a      	ldrh	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	1c9a      	adds	r2, r3, #2
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80028e4:	e011      	b.n	800290a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e6:	f7fe fdc9 	bl	800147c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d803      	bhi.n	80028fe <HAL_SPI_Transmit+0x168>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d102      	bne.n	8002904 <HAL_SPI_Transmit+0x16e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002908:	e074      	b.n	80029f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ce      	bne.n	80028b2 <HAL_SPI_Transmit+0x11c>
 8002914:	e04c      	b.n	80029b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_SPI_Transmit+0x18e>
 800291e:	8afb      	ldrh	r3, [r7, #22]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d140      	bne.n	80029a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800294a:	e02c      	b.n	80029a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d113      	bne.n	8002982 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002980:	e011      	b.n	80029a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002982:	f7fe fd7b 	bl	800147c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d803      	bhi.n	800299a <HAL_SPI_Transmit+0x204>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d102      	bne.n	80029a0 <HAL_SPI_Transmit+0x20a>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029a4:	e026      	b.n	80029f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1cd      	bne.n	800294c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fbd9 	bl	800316c <SPI_EndRxTxTransaction>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e000      	b.n	80029f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80029f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a04:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b088      	sub	sp, #32
 8002a12:	af02      	add	r7, sp, #8
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2a:	d112      	bne.n	8002a52 <HAL_SPI_Receive+0x44>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10e      	bne.n	8002a52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2204      	movs	r2, #4
 8002a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f8f1 	bl	8002c30 <HAL_SPI_TransmitReceive>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	e0ea      	b.n	8002c28 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_SPI_Receive+0x52>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0e3      	b.n	8002c28 <HAL_SPI_Receive+0x21a>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a68:	f7fe fd08 	bl	800147c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a7e:	e0ca      	b.n	8002c16 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Receive+0x7e>
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a90:	e0c1      	b.n	8002c16 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2204      	movs	r2, #4
 8002a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad8:	d10f      	bne.n	8002afa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d007      	beq.n	8002b18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d162      	bne.n	8002be6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b20:	e02e      	b.n	8002b80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d115      	bne.n	8002b5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f103 020c 	add.w	r2, r3, #12
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b5a:	e011      	b.n	8002b80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5c:	f7fe fc8e 	bl	800147c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d803      	bhi.n	8002b74 <HAL_SPI_Receive+0x166>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d102      	bne.n	8002b7a <HAL_SPI_Receive+0x16c>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b7e:	e04a      	b.n	8002c16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1cb      	bne.n	8002b22 <HAL_SPI_Receive+0x114>
 8002b8a:	e031      	b.n	8002bf0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d113      	bne.n	8002bc2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bc0:	e011      	b.n	8002be6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc2:	f7fe fc5b 	bl	800147c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d803      	bhi.n	8002bda <HAL_SPI_Receive+0x1cc>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d102      	bne.n	8002be0 <HAL_SPI_Receive+0x1d2>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002be4:	e017      	b.n	8002c16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1cd      	bne.n	8002b8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fa53 	bl	80030a0 <SPI_EndRxTransaction>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
 8002c12:	e000      	b.n	8002c16 <HAL_SPI_Receive+0x208>
  }

error :
 8002c14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x26>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e18a      	b.n	8002f6c <HAL_SPI_TransmitReceive+0x33c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c5e:	f7fe fc0d 	bl	800147c <HAL_GetTick>
 8002c62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d00f      	beq.n	8002ca0 <HAL_SPI_TransmitReceive+0x70>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c86:	d107      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x68>
 8002c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d003      	beq.n	8002ca0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c9e:	e15b      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_SPI_TransmitReceive+0x82>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_TransmitReceive+0x82>
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cb8:	e14e      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d003      	beq.n	8002cce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2205      	movs	r2, #5
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	887a      	ldrh	r2, [r7, #2]
 8002cf6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d007      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2a:	d178      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x10a>
 8002d34:	8b7b      	ldrh	r3, [r7, #26]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d166      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	881a      	ldrh	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	1c9a      	adds	r2, r3, #2
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d5e:	e053      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d11b      	bne.n	8002da6 <HAL_SPI_TransmitReceive+0x176>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d016      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0x176>
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d113      	bne.n	8002da6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	881a      	ldrh	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	1c9a      	adds	r2, r3, #2
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d119      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x1b8>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d014      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	1c9a      	adds	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002de8:	f7fe fb48 	bl	800147c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d807      	bhi.n	8002e08 <HAL_SPI_TransmitReceive+0x1d8>
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d003      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e06:	e0a7      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1a6      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x130>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1a1      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x130>
 8002e1c:	e07c      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x1fc>
 8002e26:	8b7b      	ldrh	r3, [r7, #26]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d16b      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e52:	e057      	b.n	8002f04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d11c      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x26c>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x26c>
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d114      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d119      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x2ae>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d014      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ede:	f7fe facd 	bl	800147c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d803      	bhi.n	8002ef6 <HAL_SPI_TransmitReceive+0x2c6>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d102      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x2cc>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f02:	e029      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1a2      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x224>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d19d      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f925 	bl	800316c <SPI_EndRxTxTransaction>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f34:	e010      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	e000      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f82:	b2db      	uxtb	r3, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa0:	f7fe fa6c 	bl	800147c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb0:	f7fe fa64 	bl	800147c <HAL_GetTick>
 8002fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	0d1b      	lsrs	r3, r3, #20
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc6:	e054      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d050      	beq.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd0:	f7fe fa54 	bl	800147c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d902      	bls.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d13d      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d111      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d004      	beq.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d107      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d10f      	bne.n	800304e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e017      	b.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3b01      	subs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d19b      	bne.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000000 	.word	0x20000000

080030a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b4:	d111      	bne.n	80030da <SPI_EndRxTransaction+0x3a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030be:	d004      	beq.n	80030ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d107      	bne.n	80030da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e2:	d12a      	bne.n	800313a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ec:	d012      	beq.n	8003114 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff49 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02d      	beq.n	8003160 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e026      	b.n	8003162 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	2101      	movs	r1, #1
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff ff36 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01a      	beq.n	8003160 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e013      	b.n	8003162 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff ff23 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e000      	b.n	8003162 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <SPI_EndRxTxTransaction+0x7c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <SPI_EndRxTxTransaction+0x80>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0d5b      	lsrs	r3, r3, #21
 8003184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003196:	d112      	bne.n	80031be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2200      	movs	r2, #0
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff fef4 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00f      	b.n	80031de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d0f2      	beq.n	80031be <SPI_EndRxTxTransaction+0x52>
 80031d8:	e000      	b.n	80031dc <SPI_EndRxTxTransaction+0x70>
        break;
 80031da:	bf00      	nop
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000000 	.word	0x20000000
 80031ec:	165e9f81 	.word	0x165e9f81

080031f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e03f      	b.n	8003282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe f80a 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	; 0x24
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fd81 	bl	8003d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b08a      	sub	sp, #40	; 0x28
 800328e:	af02      	add	r7, sp, #8
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f040 808c 	bne.w	80033c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_UART_Receive+0x2e>
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e084      	b.n	80033c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Receive+0x40>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e07d      	b.n	80033c6 <HAL_UART_Receive+0x13c>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2222      	movs	r2, #34	; 0x22
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e6:	f7fe f8c9 	bl	800147c <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d108      	bne.n	8003314 <HAL_UART_Receive+0x8a>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e003      	b.n	800331c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003324:	e043      	b.n	80033ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	2120      	movs	r1, #32
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fafb 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e042      	b.n	80033c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	b29a      	uxth	r2, r3
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	3302      	adds	r3, #2
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e01f      	b.n	80033a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d007      	beq.n	800337a <HAL_UART_Receive+0xf0>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_UART_Receive+0xfe>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e008      	b.n	800339a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003394:	b2da      	uxtb	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1b6      	bne.n	8003326 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b0ba      	sub	sp, #232	; 0xe8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800340e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_UART_IRQHandler+0x66>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fbc9 	bl	8003bc6 <UART_Receive_IT>
      return;
 8003434:	e256      	b.n	80038e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80de 	beq.w	80035fc <HAL_UART_IRQHandler+0x22c>
 8003440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80d1 	beq.w	80035fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_UART_IRQHandler+0xae>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xd2>
 800348a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0xf6>
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d011      	beq.n	80034f6 <HAL_UART_IRQHandler+0x126>
 80034d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0208 	orr.w	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 81ed 	beq.w	80038da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_UART_IRQHandler+0x14e>
 800350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fb54 	bl	8003bc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <HAL_UART_IRQHandler+0x17a>
 8003542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04f      	beq.n	80035ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa5c 	bl	8003a08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d141      	bne.n	80035e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3314      	adds	r3, #20
 8003564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800357c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800358a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800358e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1d9      	bne.n	800355e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d013      	beq.n	80035da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	4a7d      	ldr	r2, [pc, #500]	; (80037ac <HAL_UART_IRQHandler+0x3dc>)
 80035b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe f90d 	bl	80017de <HAL_DMA_Abort_IT>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035d4:	4610      	mov	r0, r2
 80035d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d8:	e00e      	b.n	80035f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f990 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e0:	e00a      	b.n	80035f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f98c 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	e006      	b.n	80035f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f988 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035f6:	e170      	b.n	80038da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	bf00      	nop
    return;
 80035fa:	e16e      	b.n	80038da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b01      	cmp	r3, #1
 8003602:	f040 814a 	bne.w	800389a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8143 	beq.w	800389a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 813c 	beq.w	800389a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	f040 80b4 	bne.w	80037b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8140 	beq.w	80038de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003666:	429a      	cmp	r2, r3
 8003668:	f080 8139 	bcs.w	80038de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003672:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367e:	f000 8088 	beq.w	8003792 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1d9      	bne.n	8003682 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3314      	adds	r3, #20
 80036ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e1      	bne.n	80036ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3314      	adds	r3, #20
 800372a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800372e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003730:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003734:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800373c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e3      	bne.n	800370a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003762:	f023 0310 	bic.w	r3, r3, #16
 8003766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003774:	65ba      	str	r2, [r7, #88]	; 0x58
 8003776:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800377a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e3      	bne.n	8003750 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd ffb6 	bl	80016fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800379a:	b29b      	uxth	r3, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8b6 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037a8:	e099      	b.n	80038de <HAL_UART_IRQHandler+0x50e>
 80037aa:	bf00      	nop
 80037ac:	08003acf 	.word	0x08003acf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 808b 	beq.w	80038e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8086 	beq.w	80038e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037fa:	647a      	str	r2, [r7, #68]	; 0x44
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e3      	bne.n	80037d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	623b      	str	r3, [r7, #32]
   return(result);
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003832:	633a      	str	r2, [r7, #48]	; 0x30
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e3      	bne.n	800380e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60fb      	str	r3, [r7, #12]
   return(result);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0310 	bic.w	r3, r3, #16
 800386a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003878:	61fa      	str	r2, [r7, #28]
 800387a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	617b      	str	r3, [r7, #20]
   return(result);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e3      	bne.n	8003854 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800388c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f83e 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003898:	e023      	b.n	80038e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_UART_IRQHandler+0x4ea>
 80038a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f91f 	bl	8003af6 <UART_Transmit_IT>
    return;
 80038b8:	e014      	b.n	80038e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <HAL_UART_IRQHandler+0x514>
 80038c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f95f 	bl	8003b96 <UART_EndTransmit_IT>
    return;
 80038d8:	e004      	b.n	80038e4 <HAL_UART_IRQHandler+0x514>
    return;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <HAL_UART_IRQHandler+0x514>
      return;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <HAL_UART_IRQHandler+0x514>
      return;
 80038e2:	bf00      	nop
  }
}
 80038e4:	37e8      	adds	r7, #232	; 0xe8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop

080038ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b090      	sub	sp, #64	; 0x40
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	e050      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d04c      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <UART_WaitOnFlagUntilTimeout+0x30>
 800394c:	f7fd fd96 	bl	800147c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003958:	429a      	cmp	r2, r3
 800395a:	d241      	bcs.n	80039e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800397c:	637a      	str	r2, [r7, #52]	; 0x34
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3314      	adds	r3, #20
 8003996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	613b      	str	r3, [r7, #16]
   return(result);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039b0:	623a      	str	r2, [r7, #32]
 80039b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	69f9      	ldr	r1, [r7, #28]
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e00f      	b.n	8003a00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d09f      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3740      	adds	r7, #64	; 0x40
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b095      	sub	sp, #84	; 0x54
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a30:	643a      	str	r2, [r7, #64]	; 0x40
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d119      	bne.n	8003ab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa0:	61ba      	str	r2, [r7, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6979      	ldr	r1, [r7, #20]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	613b      	str	r3, [r7, #16]
   return(result);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ac2:	bf00      	nop
 8003ac4:	3754      	adds	r7, #84	; 0x54
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ff09 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b21      	cmp	r3, #33	; 0x21
 8003b08:	d13e      	bne.n	8003b88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b12:	d114      	bne.n	8003b3e <UART_Transmit_IT+0x48>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d110      	bne.n	8003b3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	621a      	str	r2, [r3, #32]
 8003b3c:	e008      	b.n	8003b50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6211      	str	r1, [r2, #32]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10f      	bne.n	8003b84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fe98 	bl	80038ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b08c      	sub	sp, #48	; 0x30
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b22      	cmp	r3, #34	; 0x22
 8003bd8:	f040 80ab 	bne.w	8003d32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	d117      	bne.n	8003c16 <UART_Receive_IT+0x50>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d113      	bne.n	8003c16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28
 8003c14:	e026      	b.n	8003c64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d007      	beq.n	8003c3a <UART_Receive_IT+0x74>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <UART_Receive_IT+0x82>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e008      	b.n	8003c5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4619      	mov	r1, r3
 8003c72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d15a      	bne.n	8003d2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0220 	bic.w	r2, r2, #32
 8003c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d135      	bne.n	8003d24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f023 0310 	bic.w	r3, r3, #16
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	623a      	str	r2, [r7, #32]
 8003ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	69f9      	ldr	r1, [r7, #28]
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e5      	bne.n	8003cbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d10a      	bne.n	8003d16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fdf9 	bl	8003914 <HAL_UARTEx_RxEventCallback>
 8003d22:	e002      	b.n	8003d2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fd f9d3 	bl	80010d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e002      	b.n	8003d34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e000      	b.n	8003d34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d32:	2302      	movs	r3, #2
  }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3730      	adds	r7, #48	; 0x30
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	b09f      	sub	sp, #124	; 0x7c
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d52:	68d9      	ldr	r1, [r3, #12]
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	ea40 0301 	orr.w	r3, r0, r1
 8003d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d80:	f021 010c 	bic.w	r1, r1, #12
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	6999      	ldr	r1, [r3, #24]
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4bc5      	ldr	r3, [pc, #788]	; (80040c0 <UART_SetConfig+0x384>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d004      	beq.n	8003dba <UART_SetConfig+0x7e>
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4bc3      	ldr	r3, [pc, #780]	; (80040c4 <UART_SetConfig+0x388>)
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d103      	bne.n	8003dc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dba:	f7fd ffff 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8003dbe:	6778      	str	r0, [r7, #116]	; 0x74
 8003dc0:	e002      	b.n	8003dc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7fd ffe7 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8003dc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	f040 80b6 	bne.w	8003f40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd6:	461c      	mov	r4, r3
 8003dd8:	f04f 0500 	mov.w	r5, #0
 8003ddc:	4622      	mov	r2, r4
 8003dde:	462b      	mov	r3, r5
 8003de0:	1891      	adds	r1, r2, r2
 8003de2:	6439      	str	r1, [r7, #64]	; 0x40
 8003de4:	415b      	adcs	r3, r3
 8003de6:	647b      	str	r3, [r7, #68]	; 0x44
 8003de8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dec:	1912      	adds	r2, r2, r4
 8003dee:	eb45 0303 	adc.w	r3, r5, r3
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	00d9      	lsls	r1, r3, #3
 8003dfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e00:	00d0      	lsls	r0, r2, #3
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	1911      	adds	r1, r2, r4
 8003e08:	6639      	str	r1, [r7, #96]	; 0x60
 8003e0a:	416b      	adcs	r3, r5
 8003e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e28:	f7fc f9ec 	bl	8000204 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4ba5      	ldr	r3, [pc, #660]	; (80040c8 <UART_SetConfig+0x38c>)
 8003e32:	fba3 2302 	umull	r2, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	011e      	lsls	r6, r3, #4
 8003e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3c:	461c      	mov	r4, r3
 8003e3e:	f04f 0500 	mov.w	r5, #0
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	1891      	adds	r1, r2, r2
 8003e48:	6339      	str	r1, [r7, #48]	; 0x30
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e52:	1912      	adds	r2, r2, r4
 8003e54:	eb45 0303 	adc.w	r3, r5, r3
 8003e58:	f04f 0000 	mov.w	r0, #0
 8003e5c:	f04f 0100 	mov.w	r1, #0
 8003e60:	00d9      	lsls	r1, r3, #3
 8003e62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e66:	00d0      	lsls	r0, r2, #3
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	1911      	adds	r1, r2, r4
 8003e6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e70:	416b      	adcs	r3, r5
 8003e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	1891      	adds	r1, r2, r2
 8003e80:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e82:	415b      	adcs	r3, r3
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e8e:	f7fc f9b9 	bl	8000204 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4b8c      	ldr	r3, [pc, #560]	; (80040c8 <UART_SetConfig+0x38c>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	; 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	3332      	adds	r3, #50	; 0x32
 8003eaa:	4a87      	ldr	r2, [pc, #540]	; (80040c8 <UART_SetConfig+0x38c>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eb8:	441e      	add	r6, r3
 8003eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	1894      	adds	r4, r2, r2
 8003ec8:	623c      	str	r4, [r7, #32]
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ed2:	1812      	adds	r2, r2, r0
 8003ed4:	eb41 0303 	adc.w	r3, r1, r3
 8003ed8:	f04f 0400 	mov.w	r4, #0
 8003edc:	f04f 0500 	mov.w	r5, #0
 8003ee0:	00dd      	lsls	r5, r3, #3
 8003ee2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ee6:	00d4      	lsls	r4, r2, #3
 8003ee8:	4622      	mov	r2, r4
 8003eea:	462b      	mov	r3, r5
 8003eec:	1814      	adds	r4, r2, r0
 8003eee:	653c      	str	r4, [r7, #80]	; 0x50
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	61b9      	str	r1, [r7, #24]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f0e:	f7fc f979 	bl	8000204 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4b6c      	ldr	r3, [pc, #432]	; (80040c8 <UART_SetConfig+0x38c>)
 8003f18:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	2164      	movs	r1, #100	; 0x64
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	3332      	adds	r3, #50	; 0x32
 8003f2a:	4a67      	ldr	r2, [pc, #412]	; (80040c8 <UART_SetConfig+0x38c>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0207 	and.w	r2, r3, #7
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4432      	add	r2, r6
 8003f3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f3e:	e0b9      	b.n	80040b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f42:	461c      	mov	r4, r3
 8003f44:	f04f 0500 	mov.w	r5, #0
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	6139      	str	r1, [r7, #16]
 8003f50:	415b      	adcs	r3, r3
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f58:	1912      	adds	r2, r2, r4
 8003f5a:	eb45 0303 	adc.w	r3, r5, r3
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	00d9      	lsls	r1, r3, #3
 8003f68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f6c:	00d0      	lsls	r0, r2, #3
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	eb12 0804 	adds.w	r8, r2, r4
 8003f76:	eb43 0905 	adc.w	r9, r3, r5
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f92:	0082      	lsls	r2, r0, #2
 8003f94:	4640      	mov	r0, r8
 8003f96:	4649      	mov	r1, r9
 8003f98:	f7fc f934 	bl	8000204 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4b49      	ldr	r3, [pc, #292]	; (80040c8 <UART_SetConfig+0x38c>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011e      	lsls	r6, r3, #4
 8003faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fac:	4618      	mov	r0, r3
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	1894      	adds	r4, r2, r2
 8003fb8:	60bc      	str	r4, [r7, #8]
 8003fba:	415b      	adcs	r3, r3
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc2:	1812      	adds	r2, r2, r0
 8003fc4:	eb41 0303 	adc.w	r3, r1, r3
 8003fc8:	f04f 0400 	mov.w	r4, #0
 8003fcc:	f04f 0500 	mov.w	r5, #0
 8003fd0:	00dd      	lsls	r5, r3, #3
 8003fd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fd6:	00d4      	lsls	r4, r2, #3
 8003fd8:	4622      	mov	r2, r4
 8003fda:	462b      	mov	r3, r5
 8003fdc:	1814      	adds	r4, r2, r0
 8003fde:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fe0:	414b      	adcs	r3, r1
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	008b      	lsls	r3, r1, #2
 8003ff8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ffc:	0082      	lsls	r2, r0, #2
 8003ffe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004002:	f7fc f8ff 	bl	8000204 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <UART_SetConfig+0x38c>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	; 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	3332      	adds	r3, #50	; 0x32
 800401e:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <UART_SetConfig+0x38c>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402a:	441e      	add	r6, r3
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	4618      	mov	r0, r3
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	1894      	adds	r4, r2, r2
 800403a:	603c      	str	r4, [r7, #0]
 800403c:	415b      	adcs	r3, r3
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004044:	1812      	adds	r2, r2, r0
 8004046:	eb41 0303 	adc.w	r3, r1, r3
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	f04f 0500 	mov.w	r5, #0
 8004052:	00dd      	lsls	r5, r3, #3
 8004054:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004058:	00d4      	lsls	r4, r2, #3
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	eb12 0a00 	adds.w	sl, r2, r0
 8004062:	eb43 0b01 	adc.w	fp, r3, r1
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4618      	mov	r0, r3
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	008b      	lsls	r3, r1, #2
 800407a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800407e:	0082      	lsls	r2, r0, #2
 8004080:	4650      	mov	r0, sl
 8004082:	4659      	mov	r1, fp
 8004084:	f7fc f8be 	bl	8000204 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <UART_SetConfig+0x38c>)
 800408e:	fba3 1302 	umull	r1, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2164      	movs	r1, #100	; 0x64
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	3332      	adds	r3, #50	; 0x32
 80040a0:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <UART_SetConfig+0x38c>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4432      	add	r2, r6
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	377c      	adds	r7, #124	; 0x7c
 80040b8:	46bd      	mov	sp, r7
 80040ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040be:	bf00      	nop
 80040c0:	40011000 	.word	0x40011000
 80040c4:	40011400 	.word	0x40011400
 80040c8:	51eb851f 	.word	0x51eb851f

080040cc <__libc_init_array>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4d0d      	ldr	r5, [pc, #52]	; (8004104 <__libc_init_array+0x38>)
 80040d0:	4c0d      	ldr	r4, [pc, #52]	; (8004108 <__libc_init_array+0x3c>)
 80040d2:	1b64      	subs	r4, r4, r5
 80040d4:	10a4      	asrs	r4, r4, #2
 80040d6:	2600      	movs	r6, #0
 80040d8:	42a6      	cmp	r6, r4
 80040da:	d109      	bne.n	80040f0 <__libc_init_array+0x24>
 80040dc:	4d0b      	ldr	r5, [pc, #44]	; (800410c <__libc_init_array+0x40>)
 80040de:	4c0c      	ldr	r4, [pc, #48]	; (8004110 <__libc_init_array+0x44>)
 80040e0:	f000 f820 	bl	8004124 <_init>
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	2600      	movs	r6, #0
 80040ea:	42a6      	cmp	r6, r4
 80040ec:	d105      	bne.n	80040fa <__libc_init_array+0x2e>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f4:	4798      	blx	r3
 80040f6:	3601      	adds	r6, #1
 80040f8:	e7ee      	b.n	80040d8 <__libc_init_array+0xc>
 80040fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fe:	4798      	blx	r3
 8004100:	3601      	adds	r6, #1
 8004102:	e7f2      	b.n	80040ea <__libc_init_array+0x1e>
 8004104:	0800415c 	.word	0x0800415c
 8004108:	0800415c 	.word	0x0800415c
 800410c:	0800415c 	.word	0x0800415c
 8004110:	08004160 	.word	0x08004160

08004114 <memset>:
 8004114:	4402      	add	r2, r0
 8004116:	4603      	mov	r3, r0
 8004118:	4293      	cmp	r3, r2
 800411a:	d100      	bne.n	800411e <memset+0xa>
 800411c:	4770      	bx	lr
 800411e:	f803 1b01 	strb.w	r1, [r3], #1
 8004122:	e7f9      	b.n	8004118 <memset+0x4>

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
